#!/bin/bash -ex

function print_help() {
  cat << EOF
Starts Conjur for development. Once setup is complete, the user is dropped into the Conjur container.
To start the application server, run:
    # conjurctl server

Usage: start [options]
    --authn-ldap    Starts OpenLDAP server and loads a demo policy to enable authentication via:
                    'curl -X POST -d "alice" http://localhost:3000/authn-ldap/test/cucumber/alice/authenticate'
    --rotators      Starts a cucumber and test postgres container.
                    Drops you into the cucumber container.
                    You then manually start 'conjurctl server' in another tab.

    --authn-iam     Starts with authn-iam/prod as authenticator

    --authn-oidc    Starts with authn-oidc/keycloak as authenticator

    --oidc-adfs     Adds to authn-oidc adfs static env configuration

    --oidc-okta     Adds to authn-oidc okta static env configuration

    --audit         Starts with the audit engine and database enabled

    -h, --help      Shows this help message.
EOF
  exit
}

function keycloak_isready?() {
  for i in {1..20}
  do
   sleep=10
   echo "keycloak starting logs:"
   echo "$(docker-compose logs oidc-keycloak)"
   output=$(docker-compose logs oidc-keycloak | grep "started" | wc -l)
   if [ $output -ne 0 ]; then
        echo "Keycloak server is up and ready"
        return 0;
   else
        echo "Keycloak not ready yet sleep number $i for $sleep seconds"
        sleep $sleep
   fi
  done
  echo "Error with keycloak server start or it is too slow"
  return 1
}

unset COMPOSE_PROJECT_NAME

# Determine which extra services should be loaded when working with authenticators
ENABLE_AUTHN_LDAP=false
ENABLE_AUTHN_IAM=false
ENABLE_AUTHN_OIDC=false
ENABLE_OIDC_ADFS=false
ENABLE_OIDC_OKTA=false
ENABLE_ROTATORS=false
ENABLE_AUDIT=false
while true ; do
  case "$1" in
    --authn-iam ) ENABLE_AUTHN_IAM=true ; shift ;;
    --authn-ldap ) ENABLE_AUTHN_LDAP=true ; shift ;;
    --authn-oidc ) ENABLE_AUTHN_OIDC=true ; shift ;;
    --oidc-adfs ) ENABLE_OIDC_ADFS=true ; shift ;;
    --oidc-okta ) ENABLE_OIDC_OKTA=true ; shift ;;
    --rotators ) ENABLE_ROTATORS=true ; shift ;;
    --audit ) ENABLE_AUDIT=true ; shift ;;
    -h | --help ) print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

docker-compose build

if [ ! -f data_key ]; then
	echo "Generating data key"
	openssl rand -base64 32 > data_key
fi

export CONJUR_DATA_KEY="$(cat data_key)"

services="pg conjur"
docker-compose up -d --no-deps $services
docker-compose exec conjur bundle update
docker-compose exec conjur bundle
docker-compose exec conjur conjurctl db migrate
docker-compose exec conjur conjurctl account create cucumber || true

enabled_authenticators="authn"

env_args=
if [[ $ENABLE_AUTHN_LDAP = true ]]; then
  services="$services ldap-server"
  env_args="$env_args -e LDAP_URI=ldap://ldap-server:389"
  env_args="$env_args -e LDAP_BASE=dc=conjur,dc=net"
  env_args="$env_args -e LDAP_FILTER=(uid=%s)"
  env_args="$env_args -e LDAP_BINDDN=cn=admin,dc=conjur,dc=net"
  env_args="$env_args -e LDAP_BINDPW=ldapsecret"

  enabled_authenticators="$enabled_authenticators,authn-ldap/test,authn-ldap/secure"

  docker-compose exec conjur conjurctl policy load cucumber /src/conjur-server/dev/files/authn-ldap/policy.yml
fi

if [[ $ENABLE_AUTHN_OIDC = false && ($ENABLE_OIDC_ADFS = true || $ENABLE_OIDC_OKTA = true) ]]; then
    echo "Error: --oidc-adfs/--oidc-okta should be configured as part of --authn-oidc"
    exit 1
fi

if [[ $ENABLE_AUTHN_OIDC = true ]]; then
  services="$services oidc-keycloak oidc-phantomjs client"
  docker-compose up -d --no-deps $services

  echo "Configuring Keycloak as OpenID provider for automatic testing"
  enabled_authenticators="$enabled_authenticators,authn-oidc/keycloak"

  # Check if keycloak is up
  keycloak_isready?

  echo "Initialize keycloak certificate in conjur server"
  docker-compose exec conjur /src/conjur-server/ci/authn-oidc/keycloak/fetchCertificate

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
    echo "Configuring OKTA as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/okta"
  fi

  if [[ $ENABLE_OIDC_ADFS = true ]]; then
    echo "Configuring ADFS as OpenID provider for manual testing"
    enabled_authenticators="$enabled_authenticators,authn-oidc/adfs"
    echo "Initialize ADFS certificate in conjur server"
    docker-compose exec conjur /src/conjur-server/dev/files/authn-oidc/adfs/fetchCertificate
  fi

  echo "Starting Conjur server"
  api_key=$(docker-compose exec -T conjur conjurctl \
  	role retrieve-key cucumber:user:admin | tr -d '\r')
  docker-compose exec $env_args -d conjur conjurctl server

  echo "Sleep 30 sec for Conjur server to start"
  sleep 30

  docker-compose exec client conjur authn login -u admin -p $api_key

  # add variables' values for keycloak
  echo "Setting keycloak variables values in conjur"
  docker-compose exec client conjur policy load root /src/conjur-server/ci/authn-oidc/policy.yml
  docker-compose exec client conjur variable values add conjur/authn-oidc/keycloak/provider-uri "https://keycloak:8443/auth/realms/master"
  docker-compose exec client conjur variable values add conjur/authn-oidc/keycloak/id-token-user-property "preferred_username"

  if [[ $ENABLE_OIDC_OKTA = true ]]; then
      # add variables' values for okta
      docker-compose exec client conjur policy load root /src/conjur-server/ci/authn-oidc/policy_okta.yml
      docker-compose exec client conjur variable values add conjur/authn-oidc/okta/client-id 0oaendblxV2shmOjY356
      docker-compose exec client conjur variable values add conjur/authn-oidc/okta/client-secret YU1_BVcUHNwP-6-cg8CHah_M6HiP3SiSlbN2rAEz
      docker-compose exec client conjur variable values add conjur/authn-oidc/okta/provider-uri https://cyberarkoidctest.okta.com
      docker-compose exec client conjur variable values add conjur/authn-oidc/okta/id-token-user-property "preferred_username"
  fi

  if [[ $ENABLE_OIDC_ADFS = true ]]; then
    # add variables' values for ADFS
    docker-compose exec client conjur policy load root /src/conjur-server/ci/authn-oidc/policy_adfs.yml
    docker-compose exec client conjur variable values add conjur/authn-oidc/adfs/provider-uri https://adfs4win2016.northeurope.cloudapp.azure.com
    docker-compose exec client conjur variable values add conjur/authn-oidc/adfs/id-token-user-property "unique_name"
  fi

  echo "killing the conjur server process"
  docker-compose exec conjur /src/conjur-server/dev/files/killConjurServer

  echo "Creating OpenID client in keycloack OpenID provider"
  docker-compose exec oidc-keycloak /authn-oidc/keycloak/scripts/create_client
  echo "keycloak admin console url: http://0.0.0.0:7777/auth/admin"

  echo "extracting keycloak parameters"
  KEYCLOAK_APP_USER="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_APP_USER | tr -d '\r')"
  KEYCLOAK_APP_USER_PASSWORD="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_APP_USER_PASSWORD | tr -d '\r')"
  KEYCLOAK_APP_USER_EMAIL="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_APP_USER_EMAIL | tr -d '\r')"

  KEYCLOAK_SECOND_APP_USER="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_SECOND_APP_USER | tr -d '\r')"
  KEYCLOAK_SECOND_APP_USER_PASSWORD="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_SECOND_APP_USER_PASSWORD | tr -d '\r')"
  KEYCLOAK_SECOND_APP_USER_EMAIL="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_SECOND_APP_USER_EMAIL | tr -d '\r')"

  KEYCLOAK_NON_CONJUR_APP_USER="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_NON_CONJUR_APP_USER | tr -d '\r')"
  KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD | tr -d '\r')"
  KEYCLOAK_NON_CONJUR_APP_USER_EMAIL="$(docker-compose exec oidc-keycloak printenv KEYCLOAK_NON_CONJUR_APP_USER_EMAIL | tr -d '\r')"

  echo "Creating user 'alice' in Keycloak"
  docker-compose exec oidc-keycloak /authn-oidc/keycloak/scripts/create_user $KEYCLOAK_APP_USER $KEYCLOAK_APP_USER_PASSWORD $KEYCLOAK_APP_USER_EMAIL

  echo "Creating second user 'bob' in Keycloak"
  docker-compose exec oidc-keycloak /authn-oidc/keycloak/scripts/create_user $KEYCLOAK_SECOND_APP_USER $KEYCLOAK_SECOND_APP_USER_PASSWORD $KEYCLOAK_SECOND_APP_USER_EMAIL

  echo "Creating user in Keycloak that will not exist in conjur"
  docker-compose exec oidc-keycloak /authn-oidc/keycloak/scripts/create_user $KEYCLOAK_NON_CONJUR_APP_USER $KEYCLOAK_NON_CONJUR_APP_USER_PASSWORD $KEYCLOAK_NON_CONJUR_APP_USER_EMAIL

  echo "Fetch OpenID authrization code from keycloak using phantomjs"
  docker-compose exec oidc-phantomjs /authn-oidc/phantomjs/scripts/fetchAuthCode $KEYCLOAK_APP_USER $KEYCLOAK_APP_USER_PASSWORD

  if [[ $ENABLE_AUTHN_LDAP = true && $ENABLE_OIDC_OKTA = true ]]; then
    echo "Building & configuring Okta-LDAP agent"
    services="$services okta-ldap-agent"
    docker-compose up -d --no-deps $services

    echo "Starting Okta agent service"
    Docker exec "$(docker-compose ps -q okta-ldap-agent)" /opt/Okta/OktaLDAPAgent/scripts/OktaLDAPAgent
  fi
fi

if [[ $ENABLE_ROTATORS = true ]]; then
  services="$services testdb cucumber"
fi

if [[ $ENABLE_AUTHN_IAM = true ]]; then
  enabled_authenticators="$enabled_authenticators,authn-iam/prod"

  docker-compose exec conjur conjurctl policy load cucumber /src/conjur-server/dev/files/authn-iam/policy.yml
fi

if [[ $ENABLE_AUDIT = true ]]; then
  services="$services audit"
  export AUDIT_DATABASE_URL=postgres://postgres@audit
fi

echo "Setting CONJUR_AUTHENTICATORS to: $enabled_authenticators"
env_args="$env_args -e CONJUR_AUTHENTICATORS=$enabled_authenticators"

docker-compose up -d --no-deps $services

api_key=$(docker-compose exec -T conjur conjurctl \
	role retrieve-key cucumber:user:admin | tr -d '\r')

if [[ $ENABLE_AUDIT = true ]]; then
  # Run database migration to create audit database schema
  docker-compose exec -T conjur bash -c '
  BUNDLE_GEMFILE=/src/conjur-server/Gemfile \
    bundle exec sequel $AUDIT_DATABASE_URL \
    -E -m /src/conjur-server/engines/conjur_audit/db/migrate/
  '
fi

docker exec -e CONJUR_AUTHN_API_KEY=$api_key $env_args \
  -it --detach-keys 'ctrl-\' "$(docker-compose ps -q conjur)" bash
